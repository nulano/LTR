alg listlen = (inj₁ () ⇒ 0 ‖ inj₂ (_, (p, ())) ⇒ (p + 1))
type list(l : ℕ) = μ(I ⊕ ([unat] ⊗ (Id ⊗ I))) ⊃ listlen ⇒ l

let list_nil : list(0) = into(inj₁ <>)
def list_cons : ∀l : ℕ . (unat → (list(l) → ↑list((l + 1))))
              = λx . λxs . return into(inj₂ <x, <xs, <>>>)

def list_head : ∀l : ℕ . [(l ≥ 1)] ⊃ (list(l) → ↑unat)
              = λl . match l { into(ll) ⇒ match ll {
                  inj₁ nil ⇒ unreachable
                ‖ inj₂ cons ⇒ match cons { <x, xs> ⇒ return x }
                }}

def list_tail : ∀l : ℕ . [(l ≥ 1)] ⊃ (list(l) → ↑list((l - 1)))
              = λl . match l { into(ll) ⇒ match ll {
                  inj₁ nil ⇒ unreachable
                ‖ inj₂ cons ⇒ match cons {
                    <x, xsu> ⇒ match xsu { <xs, u> ⇒ return xs }}
                }}

rec list_len : ∀l : ℕ . (list(l) → ↑nat(l))
             = λl . match l { into(ll) ⇒ match ll {
                 inj₁ nil ⇒ return nat_0
               ‖ inj₂ cons ⇒
                   let tail = list_tail(l);
                   let tail_len = list_len(tail);
                   let result = nat_succ(tail_len);
                   return result
               }}

rec list_idx : ∀l : ℕ . ∀i : ℕ . [(i < l)] ⊃ (list(l) → (nat(i) → ↑unat))
             = λl . λidx . match idx { into(ii) ⇒ match ii {
                 inj₁ zero ⇒
                   let head = list_head(l);
                   return head
               ‖ inj₂ succ ⇒ match succ { <idx_pred, u> ⇒
                   let tail = list_tail(l);
                   let result = list_idx(tail, idx_pred);
                   return result
               }}}

rec list_split : ∀l : ℕ . ∀i : ℕ . [(i ≤ l)] ⊃ (list(l) → (nat(i) → ↑(list(i) × list((l - i)))))
               = λl . λi . match i { into(ii) ⇒ match ii {
                   inj₁ zero ⇒ return <list_nil, l>
                 ‖ inj₂ succ ⇒ match succ { <i_pred, u> ⇒
                     let head = list_head(l);
                     let tail = list_tail(l);
                     let rest = list_split(tail, i_pred);
                     match rest {
                       <left_rest, right_result> ⇒
                         let left_result = list_cons(head, left_rest);
                         return <left_result, right_result>
                     }
                 }}}

rec list_append : ∀a : ℕ . ∀b : ℕ . (list(a) → (list(b) → ↑list((a + b))))
                = λleft . λright .
                  match left { into(left_) ⇒ match left_ {
                    inj₁ nil ⇒ return right
                  ‖ inj₂ cons ⇒ match cons {
                      <head, rest> ⇒ match rest {
                        <tail, u> ⇒
                          let result_tail = list_append(tail, right);
                          return into(inj₂ <head, <result_tail, <>>>)
                }}}}

def mergesort_split : ∀l : ℕ . [(l ≥ 2)] ⊃ (list(l) → ↑(list((l / 2)) × list(((l + 1) / 2))))
                    = λl .
                      let len = list_len(l);
                      let half = nat_div(len, nat_2);
                      let result = list_split(l, half);
                      return result

rec mergesort_merge : ∀total : ℕ . ∀left : ℕ . [(left ≤ total)]
                    ⊃ (nat(total) → (list(left) → (list((total - left)) → ↑list(total))))
                    = λtotal . λleft . λright .
                      match left { into(left_) ⇒ match left_ {
                        inj₁ nil ⇒ return right
                      ‖ inj₂ left_cons ⇒ match right { into(right_) ⇒ match right_ {
                          inj₁ nil ⇒ return left
                        ‖ inj₂ right_cons ⇒ match left_cons {
                            <left_head, left_rest> ⇒ match right_cons {
                              <right_head, right_rest> ⇒
                                let rest_count = nat_pred(total);
                                let left_le = nat_le(left_head, right_head);
                                match left_le {
                                  inj₂ t ⇒ match left_rest {
                                    <left_tail, u> ⇒
                                      let rest = mergesort_merge(rest_count, left_tail, right);
                                      return into(inj₂ <left_head, <rest, <>>>)
                                  }
                                ‖ inj₁ f ⇒ match right_rest {
                                    <right_tail, u> ⇒
                                      let rest = mergesort_merge(rest_count, left, right_tail);
                                      return into(inj₂ <right_head, <rest, <>>>)
                    }}}}}}}}

rec mergesort : ∀l : ℕ . (list(l) → ↑list(l))
              = λlst .
                let len = list_len(lst);
                let simple = nat_le(len, nat_1);
                match simple {
                  inj₂ t ⇒ return lst
                ‖ inj₁ f ⇒
                    let parts = mergesort_split(lst);
                    match parts {
                      <left, right> ⇒
                        let left_sorted = mergesort(left);
                        let right_sorted = mergesort(right);
                        let sorted = mergesort_merge(len, left_sorted, right_sorted);
                        return sorted
                }}

type comparator = ↓(unat → (unat → ↑(1 + 1)))

rec quicksort_split : ∀l : ℕ . (unat → (list(l) → (comparator
                    → ↑∃s : ℕ . ((list(s) × list((l - s))) ∧ [(s ≤ l)]))))
                    = λpivot . λlst . λcmp .
                    match lst { into(lst_) ⇒ match lst_ {
                        inj₁ nil ⇒ return <list_nil, list_nil>
                      ‖ inj₂ cons ⇒ match cons { <head, tu> ⇒ match tu { <tail, u> ⇒
                          let tail_split = quicksort_split(pivot, tail, cmp);
                          match tail_split { <lt, ge> ⇒
                            let is_lt = cmp(head, pivot);
                            match is_lt {
                              inj₁ f ⇒ return <lt, into(inj₂ <head, <ge, <>>>)>
                            ‖ inj₂ t ⇒ return <into(inj₂ <head, <lt, <>>>), ge>
                      }}}}}}

rec quicksort : ∀l : ℕ . (list(l) → (comparator → ↑list(l)))
              = λlst . λcmp . match lst { into(lst_) ⇒ match lst_ {
                  inj₁ nil ⇒ return lst
                ‖ inj₂ cons ⇒ match cons {
                    <pivot, rest> ⇒ match rest {
                      <tail, u> ⇒
                        let lt_ge = quicksort_split(pivot, tail, cmp);
                        match lt_ge {
                          <lt, ge> ⇒
                            let lt_sorted = quicksort(lt, cmp);
                            let ge_sorted = quicksort(ge, cmp);
                            let result = list_append(lt_sorted, into(inj₂ <pivot, <ge_sorted, <>>>));
                            return result
                }}}}}

def quicksort_asc : ∀l : ℕ . (list(l) → ↑list(l))
                  = λlst . let sorted = quicksort(lst, {
                      λx . λy . let lt = nat_lt(x, y);
                      match lt {
                        inj₁ f ⇒ return inj₁ <>
                      ‖ inj₂ t ⇒ return inj₂ <>
                      }
                    }); return sorted
