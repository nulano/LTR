alg ixnat = (inj₁ () ⇒ 0 ‖ inj₂ (a, ()) ⇒ (1 + a))
type nat(n : ℕ) = μ(I ⊕ (Id ⊗ I)) ⊃ ixnat ⇒ n
type unat = ∃n : ℕ . nat(n)

let nat_0 : nat(0) = into(inj₁ <>)
let nat_1 : nat(1) = into(inj₂ <nat_0, <>>)
let nat_2 : nat(2) = into(inj₂ <nat_1, <>>)

def nat_is0 : ∀i : ℕ . (nat(i) → ↑bool((i = 0)))
            = λwx . match wx { into (x) ⇒ match x {
                inj₁ zero ⇒ return true
              ‖ inj₂ succ ⇒ return false
              }}
def nat_not0 : ∀i : ℕ . (nat(i) → ↑bool((i ≠ 0)))
             = λwx . let is0 = nat_is0(wx);
                     let result = bool_not(into(is0));
                     return result

def nat_succ : ∀i : ℕ . (nat(i) → ↑nat((i + 1)))
             = λwx . return into(inj₂ <wx, <>>)

def nat_pred_c : ∀i : ℕ . (nat(i) → ↑nat((i - 1)))
               = λwx . match wx { into(x) ⇒ match x {
                   inj₁ zero ⇒ return nat_0
                 ‖ inj₂ succ ⇒ match succ { <wp, u> ⇒ return wp }
                 }}
let nat_pred : ↓∀i : ℕ . [(i ≥ 1)] ⊃ (nat(i) → ↑nat((i - 1))) = nat_pred_c

rec nat_lt : ∀i : ℕ . ∀j : ℕ . (nat(i) → (nat(j) → ↑bool((i < j))))
           = λwx . λwy . match wx { into(x) ⇒ match x {
               inj₁ zero ⇒
                 let result = nat_not0(wy);
                 return result
             ‖ inj₂ succ ⇒ match succ { <x_pred, u> ⇒
                 let y_pred_c = nat_pred_c(wy);
                 let result = nat_lt(x_pred, y_pred_c);
                 return result
             }}}

def nat_le : ∀i : ℕ . ∀j : ℕ . (nat(i) → (nat(j) → ↑bool((i ≤ j))))
           = λwx . λwy .
             let not_le = nat_lt(wy, wx);
             let result = bool_not(into(not_le));
             return result

def nat_gt : ∀i : ℕ . ∀j : ℕ . (nat(i) → (nat(j) → ↑bool((i > j))))
           = λwx . λwy . let result = nat_lt(wy, wx); return result

def nat_ge : ∀i : ℕ . ∀j : ℕ . (nat(i) → (nat(j) → ↑bool((i ≥ j))))
           = λwx . λwy . let result = nat_le(wy, wx); return result

def nat_eq : ∀i : ℕ . ∀j : ℕ . (nat(i) → (nat(j) → ↑bool((i = j))))
           = λwx . λwy .
             let le = nat_le(wx, wy);
             let ge = nat_ge(wx, wy);
             let result = bool_and(into(le), into(ge));
             return result

def nat_ne : ∀i : ℕ . ∀j : ℕ . (nat(i) → (nat(j) → ↑bool((i ≠ j))))
           = λwx . λwy .
             let lt = nat_lt(wx, wy);
             let gt = nat_gt(wx, wy);
             let result = bool_or(into(lt), into(gt));
             return result

rec nat_add : ∀i : ℕ . ∀j : ℕ . (nat(i) → (nat(j) → ↑nat((i + j))))
            = λwx . λwy . match wx { into(x) ⇒ match x {
                inj₁ zero ⇒ return wy
              ‖ inj₂ succ ⇒ match succ { <x_pred, u> ⇒
                  let y_succ = nat_succ(wy);
                  let result = nat_add(x_pred, y_succ);
                  return result
              }}}

rec nat_sub : ∀i : ℕ . ∀j : ℕ . [(i ≥ j)] ⊃ (nat(i) → (nat(j) → ↑nat((i - j))))
            = λwx . λwy . match wy { into(y) ⇒ match y {
                inj₁ zero ⇒ return wx
              ‖ inj₂ succ ⇒ match succ { <y_pred, u> ⇒
                  let x_pred = nat_pred(wx);
                  let result = nat_sub(x_pred, y_pred);
                  return result
              }}}

rec nat_sub_c : ∀j : ℕ . ∀i : ℕ . (nat(i) → (nat(j) → ↑nat((i - j))))
              = λwx . λwy . match wy { into(y) ⇒ match y {
                  inj₁ zero ⇒ return wx
                ‖ inj₂ succ ⇒ match succ { <y_pred, u> ⇒
                    let x_pred_c = nat_pred_c(wx);
                    let result = nat_sub_c(x_pred_c, y_pred);
                    return result
                }}}

rec nat_div : ∀i : ℕ . ∀j : ℕ . [(j ≥ 1)] ⊃ (nat(i) → (nat(j) → ↑nat((i / j))))
            = λx . λy .
              let ge = nat_ge(x, y); match ge {
                inj₁ f ⇒ return nat_0
              ‖ inj₂ t ⇒
                  let x_minus_y = nat_sub(x, y);
                  let result_pred = nat_div(x_minus_y, y);
                  let result = nat_succ(result_pred);
                  return result
              }

-- timeout on: (j₂₀₀ : ℕ, i₁₉₉ : ℕ, i₁₉₄ : ℕ, j₂₀₆ : ℕ, (j₂₀₀ ≥ 1), (j₂₀₆ ≥ 1), ((i₁₉₄ ≥ j₂₀₆) = T)) ⊨ (((i₁₉₄ - j₂₀₆) % j₂₀₆) = (i₁₉₄ % j₂₀₆))
-- rec nat_mod : ∀i : ℕ . ∀j : ℕ . [(j ≥ 1)] ⊃ (nat(i) → (nat(j) → ↑nat((i % j))))
--             = λx . λy .
--               let ge = nat_ge(x, y); match ge {
--                 inj₁ f ⇒ return x
--               ‖ inj₂ t ⇒
--                   let x_minus_y = nat_sub(x, y);
--                   let result = nat_mod(x_minus_y, y);
--                   return result
--               }
