alg ixnat = (inj₁ () ⇒ 0 ‖ inj₂ (a, ()) ⇒ (1 + a))
type nat(i : ℕ) = μ (I ⊕ (Id ⊗ I)) ⊃ ixnat ⇒ i

let nat_0 = (return into(inj₁ <>) : ↑nat(0))

-- nat_succ(nat(i)) → nat(i + 1)
def nat_succ : ∀i : ℕ .
               (nat(i) → ↑nat((i + 1)))
             = λx . return into(inj₂ <x, <>>)

-- nat_pred_c(nat(i)) → nat(i - 1)
def nat_pred_c : ∀i : ℕ .
                 (nat(i) → ↑nat((i - 1)))
               = λx . match x {
                   into(y) ⇒ match y {
                     inj₁ u ⇒ return nat_0
                   ‖ inj₂ z ⇒ match z {
                       <w, u> ⇒ return w
                     }
                   }
                 }

-- nat_pred(nat(i) ∧ (i ≥ 1)) → nat(i - 1)
def nat_pred : ∀i : ℕ . [(i ≥ 1)] ⊃
               (nat(i) → ↑nat((i - 1)))
             = λx . let res = nat_pred_c(x); return res

-- nat_lt(nat(i), nat(j) ∧ (i < j)) → true
-- nat_lt(nat(i), nat(j) ∧ ¬(i < j)) → false
rec nat_lt : ∀i : ℕ . ∀j : ℕ .
             (nat(i) → (nat(j) → ↑bool))
           = λx . λy . match x {
             into(xx) ⇒ match xx {
               inj₁ u ⇒ match y {  -- i = 0
                 into(yy) ⇒ match yy {
                   inj₁ u ⇒ return false
                 ‖ inj₂ yyy ⇒ return true
                 }
               }
             ‖ inj₂ xxx ⇒ match xxx {  -- i > 0
                 <x_pred, u> ⇒
                   let y_pred = nat_pred_c(y);
                   let out = nat_lt(x_pred, y_pred);
                   return out
               }
             }
           }

-- nat_eq(nat(i), nat(j) ∧ (i = j)) → true
-- nat_eq(nat(i), nat(j) ∧ ¬(i = j)) → false
rec nat_eq : ∀i : ℕ . ∀j : ℕ .
             (nat(i) → (nat(j) → ↑bool))
           = λx . λy .
             let lt = nat_lt(x, y);
             let gt = nat_lt(y, x);
             let ne = bool_or(lt, gt);
             let out = bool_not(ne);
             return out

-- nat_sub(nat(i), nat(j) ∧ (i ≥ j)) → nat(i - j)
rec nat_sub : ∀i : ℕ . ∀j : ℕ . [(i ≥ j)] ⊃
              (nat(i) → (nat(j) → ↑nat((i - j))))
            = λx . λy . match y {
              into(yy) ⇒ match yy {
                inj₁ u ⇒ return x
              ‖ inj₂ yyy ⇒
                  let x_pred = nat_pred(x);
                  let y_pred = nat_pred(y);
                  let out = nat_sub(x_pred, y_pred);
                  return out
              }
            }

-- tests
-- let nat_1 = nat_succ(nat_0)
-- let nat_2 = nat_succ(nat_1)
-- let nat_1_ = nat_pred_c(nat_2)
-- let nat_0_ = nat_pred_c(nat_1_)
-- let nat_0__ = nat_pred_c(nat_0_)
-- let nat_1__ = nat_succ(nat_0__)
-- let test = nat_pred(nat_0)
-- let test = nat_pred(nat_1__)
